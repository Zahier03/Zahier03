<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Visual Script Builder</title>
  
  <!-- Styles for the Visual Script Builder UI -->
  <style>
    /* General Styles */
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body {
      font-family: 'Google Sans', Arial, sans-serif;
      color: #202124;
      background-color: #f8f9fa;
      line-height: 1.5;
    }
    
    /* Main Layout */
    .app-container {
      display: flex;
      flex-direction: column;
      height: 100vh;
      overflow: hidden;
    }
    
    /* Header Bar */
    .app-header {
      background-color: #fff;
      border-bottom: 1px solid #dadce0;
      padding: 0 16px;
      height: 64px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      flex-shrink: 0;
      box-shadow: 0 1px 2px rgba(60, 64, 67, 0.1);
    }
    
    .app-title {
      font-size: 20px;
      font-weight: 500;
      color: #202124;
      display: flex;
      align-items: center;
    }
    
    .app-logo {
      width: 32px;
      height: 32px;
      background-color: #4285f4;
      border-radius: 4px;
      margin-right: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: bold;
    }
    
    .app-actions {
      display: flex;
      gap: 8px;
    }
    
    .app-button {
      background-color: #fff;
      border: 1px solid #dadce0;
      border-radius: 4px;
      padding: 8px 16px;
      font-size: 14px;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 8px;
      transition: all 0.2s;
    }
    
    .app-button:hover {
      background-color: #f8f9fa;
      border-color: #d2d5d9;
    }
    
    .app-button.primary {
      background-color: #1a73e8;
      color: white;
      border-color: #1a73e8;
    }
    
    .app-button.primary:hover {
      background-color: #1765cc;
      border-color: #1765cc;
    }
    
    /* Main Content */
    .app-content {
      display: flex;
      flex: 1;
      overflow: hidden;
    }
    
    /* Left Panel - Tools */
    .app-sidebar {
      width: 280px;
      background-color: #fff;
      border-right: 1px solid #dadce0;
      display: flex;
      flex-direction: column;
      flex-shrink: 0;
    }
    
    .sidebar-header {
      padding: 16px;
      border-bottom: 1px solid #dadce0;
      font-weight: 500;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .sidebar-toggle {
      cursor: pointer;
      color: #5f6368;
      font-size: 20px;
    }
    
    .sidebar-content {
      flex: 1;
      overflow-y: auto;
      padding: 16px;
    }
    
    /* Tabs */
    .tabs-container {
      display: flex;
      flex-direction: column;
      height: 100%;
    }
    
    .tabs-header {
      display: flex;
      background-color: #f8f9fa;
      border-bottom: 1px solid #dadce0;
    }
    
    .tab-button {
      padding: 12px 16px;
      cursor: pointer;
      border-bottom: 3px solid transparent;
      font-size: 14px;
      color: #5f6368;
      transition: all 0.2s;
    }
    
    .tab-button.active {
      color: #1a73e8;
      border-bottom-color: #1a73e8;
      font-weight: 500;
    }
    
    .tab-button:hover:not(.active) {
      background-color: rgba(0, 0, 0, 0.04);
    }
    
    .tabs-content {
      flex: 1;
      overflow-y: auto;
      position: relative;
    }
    
    .tab-panel {
      display: none;
      padding: 16px;
      height: 100%;
    }
    
    .tab-panel.active {
      display: block;
    }
    
    /* Component Categories */
    .component-category {
      margin-bottom: 16px;
    }
    
    .category-header {
      padding: 8px 0;
      font-weight: 500;
      cursor: pointer;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .category-icon {
      margin-right: 8px;
      width: 20px;
      height: 20px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
    }
    
    .category-toggle {
      color: #5f6368;
    }
    
    .category-items {
      margin-top: 8px;
    }
    
    .component-item {
      padding: 8px 12px;
      background-color: #fff;
      border: 1px solid #dadce0;
      border-radius: 4px;
      margin-bottom: 8px;
      cursor: move;
      position: relative;
      transition: all 0.2s;
    }
    
    .component-item:hover {
      border-color: #1a73e8;
      box-shadow: 0 1px 3px rgba(60, 64, 67, 0.3);
    }
    
    .component-name {
      font-weight: 500;
      font-size: 13px;
      margin-bottom: 4px;
    }
    
    .component-desc {
      font-size: 12px;
      color: #5f6368;
    }
    
    /* Main Workspace */
    .app-workspace {
      flex: 1;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }
    
    .workspace-header {
      padding: 0 16px;
      height: 48px;
      border-bottom: 1px solid #dadce0;
      display: flex;
      align-items: center;
      justify-content: space-between;
      background-color: #f8f9fa;
    }
    
    .workspace-title {
      font-weight: 500;
      font-size: 16px;
    }
    
    .workspace-actions {
      display: flex;
      gap: 8px;
    }
    
    .workspace-content {
      flex: 1;
      overflow: auto;
      padding: 16px;
      position: relative;
    }
    
    /* Design Canvas */
    .design-canvas {
      background-color: #fff;
      border: 1px solid #dadce0;
      margin: 0 auto;
      box-shadow: 0 1px 3px rgba(60, 64, 67, 0.3);
      min-height: 500px;
      position: relative;
      width: 100%;
      max-width: 800px;
      transition: all 0.3s;
    }
    
    .design-canvas.mobile {
      max-width: 375px;
    }
    
    .design-canvas.tablet {
      max-width: 768px;
    }
    
    /* Components on Canvas */
    .canvas-component {
      position: absolute;
      background-color: #fff;
      border: 1px solid transparent;
      min-width: 50px;
      min-height: 30px;
      cursor: move;
      z-index: 1;
    }
    
    .canvas-component.selected {
      border: 2px solid #4285f4;
    }
    
    .component-header {
      position: absolute;
      top: -18px;
      left: 0;
      background-color: #4285f4;
      color: white;
      font-size: 10px;
      padding: 1px 4px;
      border-radius: 2px 2px 0 0;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.2s;
    }
    
    .canvas-component:hover .component-header,
    .canvas-component.selected .component-header {
      opacity: 1;
    }
    
    .resize-handle {
      position: absolute;
      width: 8px;
      height: 8px;
      background-color: white;
      border: 1px solid #4285f4;
      z-index: 2;
    }
    
    .resize-handle.tl { top: -4px; left: -4px; cursor: nwse-resize; }
    .resize-handle.tr { top: -4px; right: -4px; cursor: nesw-resize; }
    .resize-handle.bl { bottom: -4px; left: -4px; cursor: nesw-resize; }
    .resize-handle.br { bottom: -4px; right: -4px; cursor: nwse-resize; }
    
    /* Properties Panel */
    .properties-panel {
      width: 300px;
      background-color: #fff;
      border-left: 1px solid #dadce0;
      display: flex;
      flex-direction: column;
      flex-shrink: 0;
    }
    
    .properties-header {
      padding: 16px;
      border-bottom: 1px solid #dadce0;
      font-weight: 500;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .properties-close {
      cursor: pointer;
      color: #5f6368;
      font-size: 20px;
    }
    
    .properties-content {
      flex: 1;
      overflow-y: auto;
      padding: 16px;
    }
    
    .property-group {
      margin-bottom: 24px;
    }
    
    .property-group-title {
      font-weight: 500;
      font-size: 12px;
      text-transform: uppercase;
      color: #5f6368;
      margin-bottom: 12px;
      letter-spacing: 0.8px;
    }
    
    .property-row {
      margin-bottom: 12px;
    }
    
    .property-label {
      font-size: 13px;
      margin-bottom: 4px;
    }
    
    .property-input input,
    .property-input select,
    .property-input textarea {
      width: 100%;
      padding: 8px;
      border: 1px solid #dadce0;
      border-radius: 4px;
      font-size: 13px;
      transition: all 0.2s;
    }
    
    .property-input input:focus,
    .property-input select:focus,
    .property-input textarea:focus {
      outline: none;
      border-color: #4285f4;
      box-shadow: 0 0 0 2px rgba(66, 133, 244, 0.3);
    }
    
    .property-input.color {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .property-input.color input[type="color"] {
      width: 32px;
      height: 32px;
      padding: 0;
      border: 1px solid #dadce0;
    }
    
    .property-input.color input[type="text"] {
      flex: 1;
    }
    
    /* Tabs in Properties Panel */
    .properties-tabs {
      display: flex;
      background-color: #f8f9fa;
      border-bottom: 1px solid #dadce0;
      margin: -16px -16px 16px -16px;
    }
    
    .property-tab {
      padding: 8px 16px;
      font-size: 13px;
      color: #5f6368;
      cursor: pointer;
      border-bottom: 2px solid transparent;
    }
    
    .property-tab.active {
      color: #1a73e8;
      border-bottom-color: #1a73e8;
      font-weight: 500;
    }
    
    .tab-pane {
      display: none;
    }
    
    .tab-pane.active {
      display: block;
    }
    
    /* Bottom Panel */
    .app-footer {
      background-color: #202124;
      color: #e8eaed;
      display: flex;
      flex-direction: column;
      flex-shrink: 0;
    }
    
    .footer-tabs {
      display: flex;
      background-color: #3c4043;
      border-bottom: 1px solid #5f6368;
    }
    
    .footer-tab {
      padding: 8px 16px;
      color: #e8eaed;
      cursor: pointer;
      border-bottom: 2px solid transparent;
      font-size: 13px;
    }
    
    .footer-tab.active {
      border-bottom-color: #8ab4f8;
      color: #8ab4f8;
    }
    
    .footer-content {
      height: 200px;
      overflow: auto;
    }
    
    .footer-panel {
      display: none;
      height: 100%;
    }
    
    .footer-panel.active {
      display: block;
    }
    
    /* Console Panel */
    .console-panel {
      padding: 8px 16px;
      font-family: 'Roboto Mono', monospace;
      font-size: 12px;
      height: 100%;
      overflow: auto;
    }
    
    .console-line {
      margin-bottom: 4px;
      padding: 2px 0;
    }
    
    .console-line.error { color: #f28b82; }
    .console-line.warning { color: #fdd663; }
    .console-line.info { color: #8ab4f8; }
    .console-line.success { color: #81c995; }
    
    /* Code Panel */
    .code-panel {
      height: 100%;
      display: flex;
      flex-direction: column;
    }
    
    .code-actions {
      background-color: #3c4043;
      padding: 4px 8px;
      display: flex;
      gap: 8px;
    }
    
    .code-action {
      padding: 4px 8px;
      font-size: 12px;
      background-color: #5f6368;
      color: #e8eaed;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      transition: all 0.2s;
    }
    
    .code-action:hover {
      background-color: #7d8184;
    }
    
    .code-editor {
      flex: 1;
      font-family: 'Roboto Mono', monospace;
      font-size: 12px;
      border: none;
      resize: none;
      background-color: #202124;
      color: #e8eaed;
      padding: 8px;
    }
    
    /* Preview Panel */
    .preview-panel {
      background-color: #fff;
      height: 100%;
      overflow: auto;
    }
    
    /* Notification */
    .notification {
      position: fixed;
      bottom: 24px;
      right: 24px;
      padding: 12px 16px;
      background-color: #323232;
      color: white;
      border-radius: 4px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
      display: flex;
      align-items: center;
      z-index: 1000;
      min-width: 300px;
      max-width: 500px;
      transform: translateY(100px);
      opacity: 0;
      transition: transform 0.3s, opacity 0.3s;
    }
    
    .notification.show {
      transform: translateY(0);
      opacity: 1;
    }
    
    .notification.success { background-color: #1e8e3e; }
    .notification.error { background-color: #d93025; }
    .notification.warning { background-color: #f9ab00; }
    
    .notification-icon {
      margin-right: 12px;
      font-size: 20px;
    }
    
    .notification-message {
      flex: 1;
      font-size: 14px;
    }
    
    .notification-close {
      margin-left: 12px;
      cursor: pointer;
      font-size: 18px;
      color: rgba(255, 255, 255, 0.7);
    }
    
    /* Tooltip */
    .tooltip {
      position: absolute;
      background-color: #3c4043;
      color: white;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 12px;
      z-index: 1000;
      opacity: 0;
      transition: opacity 0.2s;
      pointer-events: none;
    }
    
    .tooltip.show {
      opacity: 1;
    }
    
    /* Loading Overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 2000;
    }
    
    .loading-spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(255, 255, 255, 0.2);
      border-radius: 50%;
      border-top-color: white;
      animation: spin 1s ease-in-out infinite;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    
    /* Component-specific styles */
    
    /* Button styles */
    .google-button {
      background-color: #1a73e8;
      color: white;
      border: none;
      border-radius: 4px;
      padding: 8px 16px;
      font-family: 'Google Sans', Arial, sans-serif;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s;
    }
    
    .google-button:hover {
      background-color: #1765cc;
    }
    
    .google-button.secondary {
      background-color: transparent;
      color: #1a73e8;
      border: 1px solid currentColor;
    }
    
    .google-button.secondary:hover {
      background-color: rgba(26, 115, 232, 0.04);
    }
    
    /* Input styles */
    .google-input {
      width: 100%;
      padding: 8px 12px;
      border: 1px solid #dadce0;
      border-radius: 4px;
      font-family: 'Google Sans', Arial, sans-serif;
      font-size: 14px;
      transition: all 0.2s;
    }
    
    .google-input:focus {
      outline: none;
      border-color: #4285f4;
      box-shadow: 0 0 0 2px rgba(66, 133, 244, 0.3);
    }
    
    /* Card styles */
    .google-card {
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(60, 64, 67, 0.3);
      overflow: hidden;
    }
    
    .card-header {
      padding: 16px;
      border-bottom: 1px solid #dadce0;
      font-weight: 500;
    }
    
    .card-content {
      padding: 16px;
    }
    
    /* Table styles */
    .google-table {
      width: 100%;
      border-collapse: collapse;
    }
    
    .google-table th {
      background-color: #f8f9fa;
      border-bottom: 1px solid #dadce0;
      padding: 8px 16px;
      text-align: left;
      font-weight: 500;
    }
    
    .google-table td {
      padding: 8px 16px;
      border-bottom: 1px solid #e8eaed;
    }
    
    /* Chip styles */
    .google-chip {
      display: inline-flex;
      align-items: center;
      background-color: #e8eaed;
      border-radius: 16px;
      padding: 4px 12px;
      font-size: 12px;
      margin-right: 8px;
      margin-bottom: 8px;
    }
    
    /* Interactive component styles */
    
    /* Timer styles */
    .timer-component {
      text-align: center;
      padding: 12px;
    }
    
    .timer-display {
      font-size: 24px;
      font-weight: 500;
      font-family: 'Roboto Mono', monospace;
      margin-bottom: 12px;
    }
    
    .timer-controls {
      display: flex;
      gap: 8px;
      justify-content: center;
    }
    
    /* Counter styles */
    .counter-component {
      padding: 12px;
      text-align: center;
    }
    
    .counter-label {
      font-weight: 500;
      margin-bottom: 8px;
    }
    
    .counter-value {
      font-size: 24px;
      font-weight: 500;
      margin-bottom: 12px;
    }
    
    .counter-controls {
      display: flex;
      gap: 8px;
      justify-content: center;
    }
    
    /* Date display styles */
    .date-display-component {
      padding: 12px;
      text-align: center;
    }
    
    .date-value {
      font-size: 16px;
    }
    
    .date-highlighted {
      font-weight: 500;
      color: #1a73e8;
    }
    
    /* Tab component styles */
    .tabs-component {
      border: 1px solid #dadce0;
      border-radius: 4px;
      overflow: hidden;
    }
    
    .tabs-header {
      display: flex;
      background-color: #f8f9fa;
      border-bottom: 1px solid #dadce0;
    }
    
    .tab-item {
      padding: 12px 16px;
      cursor: pointer;
      font-size: 14px;
      border-bottom: 3px solid transparent;
      transition: all 0.2s;
    }
    
    .tab-item.active {
      border-bottom-color: #1a73e8;
      color: #1a73e8;
    }
    
    .tab-content {
      padding: 16px;
      display: none;
    }
    
    .tab-content.active {
      display: block;
    }
    
    /* Progress bar styles */
    .progress-component {
      padding: 12px;
    }
    
    .progress-label {
      font-size: 14px;
      margin-bottom: 8px;
    }
    
    .progress-container {
      height: 8px;
      background-color: #e8eaed;
      border-radius: 4px;
      overflow: hidden;
    }
    
    .progress-bar {
      height: 100%;
      background-color: #4285f4;
      border-radius: 4px;
      transition: width 0.3s;
    }
    
    .progress-value {
      text-align: right;
      font-size: 12px;
      color: #5f6368;
      margin-top: 4px;
    }
    
    /* Notification component */
    .notification-component {
      padding: 12px 16px;
      border-radius: 4px;
      margin-bottom: 16px;
      display: flex;
      align-items: flex-start;
    }
    
    .notification-component.info {
      background-color: #e8f0fe;
      border-left: 4px solid #4285f4;
      color: #1a73e8;
    }
    
    .notification-component.success {
      background-color: #e6f4ea;
      border-left: 4px solid #0f9d58;
      color: #0f9d58;
    }
    
    .notification-component.warning {
      background-color: #fef7e0;
      border-left: 4px solid #f9ab00;
      color: #f9ab00;
    }
    
    .notification-component.error {
      background-color: #fce8e6;
      border-left: 4px solid #ea4335;
      color: #ea4335;
    }
    
    .notification-icon {
      margin-right: 12px;
      font-size: 20px;
    }
    
    .notification-content {
      flex: 1;
    }
    
    .notification-close {
      cursor: pointer;
      font-size: 16px;
      margin-left: 12px;
    }
    
    /* Data table styles */
    .data-table-component {
      padding: 12px;
    }
    
    .table-filter {
      margin-bottom: 12px;
    }
    
    .filter-input {
      width: 100%;
      padding: 8px 12px;
      border: 1px solid #dadce0;
      border-radius: 4px;
    }
    
    .data-table {
      width: 100%;
      border-collapse: collapse;
    }
    
    .data-table th {
      background-color: #f8f9fa;
      border-bottom: 1px solid #dadce0;
      padding: 8px 12px;
      text-align: left;
      font-weight: 500;
      position: relative;
    }
    
    .data-table th.sort-asc .sort-indicator:after {
      content: "▲";
      position: absolute;
      right: 4px;
      color: #1a73e8;
    }
    
    .data-table th.sort-desc .sort-indicator:after {
      content: "▼";
      position: absolute;
      right: 4px;
      color: #1a73e8;
    }
    
    .data-table td {
      padding: 8px 12px;
      border-bottom: 1px solid #e8eaed;
    }
    
    .table-pagination {
      margin-top: 12px;
      display: flex;
      align-items: center;
      justify-content: flex-end;
      gap: 8px;
    }
    
    .page-info {
      font-size: 12px;
      color: #5f6368;
    }
    
    /* Conditional component styles */
    .conditional-component {
      padding: 12px;
    }
    
    .conditional-action-component {
      padding: 12px;
      text-align: center;
    }
    
    .action-button {
      margin-bottom: 8px;
    }
    
    .action-status {
      font-size: 12px;
      min-height: 16px;
    }
    
    /* Media Breakpoints */
    @media (max-width: 768px) {
      .app-content {
        flex-direction: column;
      }
      
      .app-sidebar,
      .properties-panel {
        width: 100%;
        height: 300px;
        border: none;
        border-bottom: 1px solid #dadce0;
      }
    }
  </style>
</head>
<body>
  <div class="app-container">
    <!-- Application Header -->
    <header class="app-header">
      <div class="app-title">
        <div class="app-logo">VS</div>
        Visual Script Builder
      </div>
      
      <div class="app-actions">
        <button class="app-button" id="newProjectBtn">
          <span>New</span>
        </button>
        <button class="app-button" id="saveProjectBtn">
          <span>Save</span>
        </button>
        <button class="app-button primary" id="runProjectBtn">
          <span>Run</span>
        </button>
      </div>
    </header>
    
    <!-- Main Content Area -->
    <div class="app-content">
      <!-- Left Sidebar -->
      <div class="app-sidebar">
        <div class="sidebar-header">
          <span>Components</span>
          <span class="sidebar-toggle" id="toggleSidebar">◀</span>
        </div>
        
        <!-- Components with Tabs -->
        <div class="tabs-container">
          <div class="tabs-header">
            <div class="tab-button active" data-tab="elements">UI Elements</div>
            <div class="tab-button" data-tab="interactive">Interactive</div>
            <div class="tab-button" data-tab="data">Data</div>
          </div>
          
          <div class="tabs-content">
            <!-- UI Elements Tab -->
            <div class="tab-panel active" id="elements-tab">
              <div class="component-category">
                <div class="category-header">
                  <span><span class="category-icon">📝</span> Input Elements</span>
                  <span class="category-toggle">▼</span>
                </div>
                <div class="category-items">
                  <div class="component-item" draggable="true" data-type="textInput">
                    <div class="component-name">Text Input</div>
                    <div class="component-desc">Single line text field</div>
                  </div>
                  <div class="component-item" draggable="true" data-type="textArea">
                    <div class="component-name">Text Area</div>
                    <div class="component-desc">Multi-line text input</div>
                  </div>
                  <div class="component-item" draggable="true" data-type="select">
                    <div class="component-name">Dropdown</div>
                    <div class="component-desc">Selection dropdown menu</div>
                  </div>
                </div>
              </div>
              
              <div class="component-category">
                <div class="category-header">
                  <span><span class="category-icon">🔘</span> Buttons</span>
                  <span class="category-toggle">▼</span>
                </div>
                <div class="category-items">
                  <div class="component-item" draggable="true" data-type="button">
                    <div class="component-name">Button</div>
                    <div class="component-desc">Standard clickable button</div>
                  </div>
                  <div class="component-item" draggable="true" data-type="iconButton">
                    <div class="component-name">Icon Button</div>
                    <div class="component-desc">Button with an icon</div>
                  </div>
                </div>
              </div>
              
              <div class="component-category">
                <div class="category-header">
                  <span><span class="category-icon">📄</span> Text Elements</span>
                  <span class="category-toggle">▼</span>
                </div>
                <div class="category-items">
                  <div class="component-item" draggable="true" data-type="heading">
                    <div class="component-name">Heading</div>
                    <div class="component-desc">Section heading text</div>
                  </div>
                  <div class="component-item" draggable="true" data-type="paragraph">
                    <div class="component-name">Paragraph</div>
                    <div class="component-desc">Regular text paragraph</div>
                  </div>
                </div>
              </div>
              
              <div class="component-category">
                <div class="category-header">
                  <span><span class="category-icon">📦</span> Containers</span>
                  <span class="category-toggle">▼</span>
                </div>
                <div class="category-items">
                  <div class="component-item" draggable="true" data-type="card">
                    <div class="component-name">Card</div>
                    <div class="component-desc">Container with shadow</div>
                  </div>
                  <div class="component-item" draggable="true" data-type="panel">
                    <div class="component-name">Panel</div>
                    <div class="component-desc">Basic container panel</div>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Interactive Elements Tab -->
            <div class="tab-panel" id="interactive-tab">
              <div class="component-category">
                <div class="category-header">
                  <span><span class="category-icon">⚡</span> Interactive Elements</span>
                  <span class="category-toggle">▼</span>
                </div>
                <div class="category-items">
                  <div class="component-item" draggable="true" data-type="counter">
                    <div class="component-name">Counter</div>
                    <div class="component-desc">Numerical counter component</div>
                  </div>
                  <div class="component-item" draggable="true" data-type="timer">
                    <div class="component-name">Timer</div>
                    <div class="component-desc">Countdown or count-up timer</div>
                  </div>
                  <div class="component-item" draggable="true" data-type="dateDisplay">
                    <div class="component-name">Date Display</div>
                    <div class="component-desc">Shows formatted date/time</div>
                  </div>
                </div>
              </div>
              
              <div class="component-category">
                <div class="category-header">
                  <span><span class="category-icon">🔳</span> Layout Components</span>
                  <span class="category-toggle">▼</span>
                </div>
                <div class="category-items">
                  <div class="component-item" draggable="true" data-type="tabs">
                    <div class="component-name">Tabs</div>
                    <div class="component-desc">Tabbed content container</div>
                  </div>
                  <div class="component-item" draggable="true" data-type="accordion">
                    <div class="component-name">Accordion</div>
                    <div class="component-desc">Collapsible content sections</div>
                  </div>
                </div>
              </div>
              
              <div class="component-category">
                <div class="category-header">
                  <span><span class="category-icon">🔄</span> Conditional Components</span>
                  <span class="category-toggle">▼</span>
                </div>
                <div class="category-items">
                  <div class="component-item" draggable="true" data-type="conditionalDisplay">
                    <div class="component-name">Conditional Display</div>
                    <div class="component-desc">Content with conditions</div>
                  </div>
                  <div class="component-item" draggable="true" data-type="notification">
                    <div class="component-name">Notification</div>
                    <div class="component-desc">Alert notification message</div>
                  </div>
                  <div class="component-item" draggable="true" data-type="conditionalAction">
                    <div class="component-name">Conditional Action</div>
                    <div class="component-desc">Actions based on conditions</div>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Data Components Tab -->
            <div class="tab-panel" id="data-tab">
              <div class="component-category">
                <div class="category-header">
                  <span><span class="category-icon">📊</span> Data Components</span>
                  <span class="category-toggle">▼</span>
                </div>
                <div class="category-items">
                  <div class="component-item" draggable="true" data-type="dataTable">
                    <div class="component-name">Data Table</div>
                    <div class="component-desc">Interactive data grid</div>
                  </div>
                  <div class="component-item" draggable="true" data-type="chart">
                    <div class="component-name">Chart</div>
                    <div class="component-desc">Data visualization chart</div>
                  </div>
                  <div class="component-item" draggable="true" data-type="progressBar">
                    <div class="component-name">Progress Bar</div>
                    <div class="component-desc">Visual progress indicator</div>
                  </div>
                </div>
              </div>
              
              <div class="component-category">
                <div class="category-header">
                  <span><span class="category-icon">📤</span> Output Elements</span>
                  <span class="category-toggle">▼</span>
                </div>
                <div class="category-items">
                  <div class="component-item" draggable="true" data-type="textOutput">
                    <div class="component-name">Text Output</div>
                    <div class="component-desc">Display field for output</div>
                  </div>
                  <div class="component-item" draggable="true" data-type="alert">
                    <div class="component-name">Alert Box</div>
                    <div class="component-desc">Alert box for messages</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Main Workspace -->
      <div class="app-workspace">
        <div class="workspace-header">
          <div class="workspace-title">Design Canvas</div>
          <div class="workspace-actions">
            <select id="viewportSelect">
              <option value="desktop">Desktop</option>
              <option value="tablet">Tablet</option>
              <option value="mobile">Mobile</option>
            </select>
          </div>
        </div>
        
        <div class="workspace-content">
          <div class="design-canvas" id="designCanvas">
            <!-- Components will be placed here -->
          </div>
        </div>
      </div>
      
      <!-- Properties Panel -->
      <div class="properties-panel">
        <div class="properties-header">
          <span>Properties</span>
          <span class="properties-close" id="closeProperties">×</span>
        </div>
        
        <div class="properties-content">
          <!-- Default content when no element is selected -->
          <div class="property-group">
            <div class="property-group-title">Canvas Properties</div>
            
            <div class="property-row">
              <div class="property-label">Title</div>
              <div class="property-input">
                <input type="text" id="canvasTitle" value="My Application">
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">Theme</div>
              <div class="property-input">
                <select id="canvasTheme">
                  <option value="light">Light</option>
                  <option value="dark">Dark</option>
                  <option value="custom">Custom</option>
                </select>
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">Background Color</div>
              <div class="property-input color">
                <input type="color" id="canvasBgColor" value="#ffffff">
                <input type="text" id="canvasBgColorText" value="#ffffff">
              </div>
            </div>
          </div>
          
          <!-- Component properties will be loaded here when a component is selected -->
        </div>
      </div>
    </div>
    
    <!-- Bottom Console/Code Panel -->
    <div class="app-footer">
      <div class="footer-tabs">
        <div class="footer-tab active" data-panel="console">Console</div>
        <div class="footer-tab" data-panel="code">Generated Code</div>
        <div class="footer-tab" data-panel="preview">Preview</div>
      </div>
      
      <div class="footer-content">
        <!-- Console Panel -->
        <div class="footer-panel console-panel active" id="consolePanel">
          <div class="console-line info">Visual Script Builder console ready.</div>
          <div class="console-line">Drag elements onto the canvas to build your UI.</div>
        </div>
        
        <!-- Code Panel -->
        <div class="footer-panel code-panel" id="codePanel">
          <div class="code-actions">
            <button class="code-action" id="copyCodeBtn">Copy</button>
            <button class="code-action" id="formatCodeBtn">Format</button>
            <button class="code-action" id="downloadCodeBtn">Download</button>
          </div>
          <textarea class="code-editor" id="codeEditor" readonly>// Generated code will appear here</textarea>
        </div>
        
        <!-- Preview Panel -->
        <div class="footer-panel preview-panel" id="previewPanel">
          <iframe id="previewFrame" style="width: 100%; height: 100%; border: none;"></iframe>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Notification Template -->
  <div class="notification" id="notificationTemplate">
    <div class="notification-icon">i</div>
    <div class="notification-message">Notification message</div>
    <div class="notification-close">×</div>
  </div>
  
  <!-- Scripts -->
  <script>
    // Main application code
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize the application
      initApp();
    });
    
    // Initialize the application
    function initApp() {
      // Initialize tabbed panels
      initTabs();
      
      // Initialize drag and drop
      initDragDrop();
      
      // Initialize properties panel
      initPropertiesPanel();
      
      // Initialize component categories
      initComponentCategories();
      
      // Initialize console
      initConsole();
      
      // Initialize event handlers
      initEventHandlers();
      
      // Show welcome message
      showNotification('Welcome to Visual Script Builder', 'success');
      
      // Log initialization
      logToConsole('Application initialized successfully', 'info');
    }
    
    // Initialize tabbed panels
    function initTabs() {
      // Main tabs in the sidebar
      document.querySelectorAll('.tab-button').forEach(tabButton => {
        tabButton.addEventListener('click', function() {
          // Get the tab ID
          const tabId = this.getAttribute('data-tab');
          
          // Remove active class from all tabs
          document.querySelectorAll('.tab-button').forEach(tab => {
            tab.classList.remove('active');
          });
          
          // Add active class to clicked tab
          this.classList.add('active');
          
          // Hide all tab panels
          document.querySelectorAll('.tab-panel').forEach(panel => {
            panel.classList.remove('active');
          });
          
          // Show the selected tab panel
          document.getElementById(tabId + '-tab').classList.add('active');
        });
      });
      
      // Footer tabs
      document.querySelectorAll('.footer-tab').forEach(tabButton => {
        tabButton.addEventListener('click', function() {
          // Get the panel ID
          const panelId = this.getAttribute('data-panel');
          
          // Remove active class from all tabs
          document.querySelectorAll('.footer-tab').forEach(tab => {
            tab.classList.remove('active');
          });
          
          // Add active class to clicked tab
          this.classList.add('active');
          
          // Hide all panels
          document.querySelectorAll('.footer-panel').forEach(panel => {
            panel.classList.remove('active');
          });
          
          // Show the selected panel
          document.getElementById(panelId + 'Panel').classList.add('active');
        });
      });
    }
    
    // Initialize drag and drop functionality
    function initDragDrop() {
      // Track dragged component
      let draggedComponent = null;
      
      // Make components draggable
      document.querySelectorAll('.component-item').forEach(item => {
        item.addEventListener('dragstart', function(e) {
          draggedComponent = this;
          e.dataTransfer.setData('text/plain', this.getAttribute('data-type'));
          
          // Create a drag image
          const dragImage = this.cloneNode(true);
          dragImage.style.width = this.offsetWidth + 'px';
          dragImage.style.height = this.offsetHeight + 'px';
          dragImage.style.position = 'absolute';
          dragImage.style.top = '-1000px';
          document.body.appendChild(dragImage);
          e.dataTransfer.setDragImage(dragImage, 10, 10);
          
          // Store reference to remove later
          this._dragImage = dragImage;
        });
        
        item.addEventListener('dragend', function(e) {
          // Remove drag image
          if (this._dragImage) {
            document.body.removeChild(this._dragImage);
            delete this._dragImage;
          }
        });
      });
      
      // Make design canvas a drop target
      const designCanvas = document.getElementById('designCanvas');
      
      designCanvas.addEventListener('dragover', function(e) {
        e.preventDefault();
        this.style.boxShadow = '0 0 0 2px #4285f4';
      });
      
      designCanvas.addEventListener('dragleave', function(e) {
        this.style.boxShadow = '';
      });
      
      designCanvas.addEventListener('drop', function(e) {
        e.preventDefault();
        this.style.boxShadow = '';
        
        const componentType = e.dataTransfer.getData('text/plain');
        
        // Calculate position relative to canvas
        const rect = this.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        // Create the component at the drop position
        createComponent(componentType, x, y);
        
        // Log to console
        logToConsole(`Added ${componentType} component to canvas`, 'success');
      });
    }
    
    // Create a component on the canvas
    function createComponent(type, x, y) {
      const designCanvas = document.getElementById('designCanvas');
      
      // Create component element
      const component = document.createElement('div');
      component.className = 'canvas-component';
      component.setAttribute('data-type', type);
      component.style.left = x + 'px';
      component.style.top = y + 'px';
      
      // Default size
      let width = 200;
      let height = 40;
      
      // Component header
      const header = document.createElement('div');
      header.className = 'component-header';
      header.textContent = formatComponentName(type);
      component.appendChild(header);
      
      // Component content based on type
      let content = '';
      
      switch (type) {
        case 'textInput':
          content = '<input type="text" class="google-input" placeholder="Enter text...">';
          width = 200;
          height = 40;
          break;
        case 'textArea':
          content = '<textarea class="google-input" placeholder="Enter text..." rows="3"></textarea>';
          width = 200;
          height = 80;
          break;
        case 'select':
          content = `<select class="google-input">
            <option>Option 1</option>
            <option>Option 2</option>
            <option>Option 3</option>
          </select>`;
          width = 200;
          height = 40;
          break;
        case 'button':
          content = '<button class="google-button">Button</button>';
          width = 100;
          height = 40;
          break;
        case 'iconButton':
          content = '<button class="google-button">+</button>';
          width = 40;
          height = 40;
          break;
        case 'heading':
          content = '<h2 style="margin: 0; font-family: \'Google Sans\'; font-weight: 500;">Heading</h2>';
          width = 200;
          height = 32;
          break;
        case 'paragraph':
          content = '<p style="margin: 0; font-family: \'Google Sans\';">This is a paragraph of text that can be edited in the properties panel.</p>';
          width = 300;
          height = 60;
          break;
        case 'card':
          content = `<div class="google-card" style="width: 100%; height: 100%;">
            <div class="card-header">Card Title</div>
            <div class="card-content">Card content goes here</div>
          </div>`;
          width = 300;
          height = 200;
          break;
        case 'panel':
          content = '<div style="width: 100%; height: 100%; border: 1px solid #dadce0; padding: 16px;">Panel content</div>';
          width = 300;
          height = 150;
          break;
        case 'counter':
          content = `<div class="counter-component">
            <div class="counter-label">Counter</div>
            <div class="counter-value">0</div>
            <div class="counter-controls">
              <button class="google-button">-</button>
              <button class="google-button">+</button>
            </div>
          </div>`;
          width = 150;
          height = 100;
          break;
        case 'timer':
          content = `<div class="timer-component">
            <div class="timer-display">00:00</div>
            <div class="timer-controls">
              <button class="google-button">Start</button>
              <button class="google-button">Reset</button>
            </div>
          </div>`;
          width = 200;
          height = 100;
          break;
        case 'dateDisplay':
          content = `<div class="date-display-component">
            <div class="date-value">${new Date().toLocaleDateString()}</div>
          </div>`;
          width = 200;
          height = 40;
          break;
        case 'tabs':
          content = `<div class="tabs-component" style="width: 100%; height: 100%;">
            <div class="tabs-header">
              <div class="tab-item active">Tab 1</div>
              <div class="tab-item">Tab 2</div>
              <div class="tab-item">Tab 3</div>
            </div>
            <div class="tabs-content">
              <div class="tab-content active">Content for Tab 1</div>
              <div class="tab-content">Content for Tab 2</div>
              <div class="tab-content">Content for Tab 3</div>
            </div>
          </div>`;
          width = 400;
          height = 200;
          break;
        case 'dataTable':
          content = `<div class="data-table-component" style="width: 100%; height: 100%;">
            <table class="google-table">
              <thead>
                <tr>
                  <th>Column 1</th>
                  <th>Column 2</th>
                  <th>Column 3</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>Data 1-1</td>
                  <td>Data 1-2</td>
                  <td>Data 1-3</td>
                </tr>
                <tr>
                  <td>Data 2-1</td>
                  <td>Data 2-2</td>
                  <td>Data 2-3</td>
                </tr>
              </tbody>
            </table>
          </div>`;
          width = 400;
          height = 200;
          break;
        case 'conditionalDisplay':
          content = `<div class="conditional-component" style="width: 100%; height: 100%;">
            <div class="conditional-content">
              This content will show or hide based on conditions
            </div>
          </div>`;
          width = 300;
          height = 80;
          break;
        case 'notification':
          content = `<div class="notification-component info" style="width: 100%; margin: 0;">
            <div class="notification-icon">i</div>
            <div class="notification-content">Notification message</div>
            <div class="notification-close">×</div>
          </div>`;
          width = 300;
          height = 60;
          break;
        default:
          content = `<div>${formatComponentName(type)}</div>`;
      }
      
      // Set component size
      component.style.width = width + 'px';
      component.style.height = height + 'px';
      
      // Create inner container for the content
      const innerContainer = document.createElement('div');
      innerContainer.style.width = '100%';
      innerContainer.style.height = '100%';
      innerContainer.innerHTML = content;
      component.appendChild(innerContainer);
      
      // Add resize handles
      const corners = [
        { class: 'tl', cursor: 'nwse-resize' },
        { class: 'tr', cursor: 'nesw-resize' },
        { class: 'bl', cursor: 'nesw-resize' },
        { class: 'br', cursor: 'nwse-resize' }
      ];
      
      corners.forEach(corner => {
        const handle = document.createElement('div');
        handle.className = `resize-handle ${corner.class}`;
        handle.style.cursor = corner.cursor;
        component.appendChild(handle);
      });
      
      // Add component to canvas
      designCanvas.appendChild(component);
      
      // Make component selectable, draggable and resizable
      makeComponentInteractive(component);
      
      // Select the new component
      selectComponent(component);
      
      return component;
    }
    
    // Make a component interactive (selectable, draggable, resizable)
    function makeComponentInteractive(component) {
      // Select on click
      component.addEventListener('mousedown', function(e) {
        // Only select if clicking on the component itself, not on a resize handle
        if (!e.target.classList.contains('resize-handle')) {
          selectComponent(this);
          
          // Prepare for potential drag
          const startX = e.clientX;
          const startY = e.clientY;
          const startLeft = parseInt(this.style.left);
          const startTop = parseInt(this.style.top);
          
          const moveHandler = function(e) {
            const dx = e.clientX - startX;
            const dy = e.clientY - startY;
            
            component.style.left = (startLeft + dx) + 'px';
            component.style.top = (startTop + dy) + 'px';
            
            // Update property fields if visible
            if (component.classList.contains('selected')) {
              const xInput = document.querySelector('.property-input [data-property="x"]');
              const yInput = document.querySelector('.property-input [data-property="y"]');
              
              if (xInput) xInput.value = startLeft + dx;
              if (yInput) yInput.value = startTop + dy;
            }
          };
          
          const upHandler = function() {
            document.removeEventListener('mousemove', moveHandler);
            document.removeEventListener('mouseup', upHandler);
            
            // Generate code after moving
            generateCode();
          };
          
          document.addEventListener('mousemove', moveHandler);
          document.addEventListener('mouseup', upHandler);
        }
      });
      
      // Setup resize handlers
      component.querySelectorAll('.resize-handle').forEach(handle => {
        handle.addEventListener('mousedown', function(e) {
          e.stopPropagation();
          
          // Ensure component is selected
          selectComponent(component);
          
          const startX = e.clientX;
          const startY = e.clientY;
          const startWidth = parseInt(component.style.width);
          const startHeight = parseInt(component.style.height);
          const startLeft = parseInt(component.style.left);
          const startTop = parseInt(component.style.top);
          
          const handleClass = this.className.replace('resize-handle ', '');
          
          const moveHandler = function(e) {
            const dx = e.clientX - startX;
            const dy = e.clientY - startY;
            
            // Determine which edges to resize based on the handle
            if (handleClass.includes('t')) { // Top edge
              component.style.top = (startTop + dy) + 'px';
              component.style.height = Math.max(30, startHeight - dy) + 'px';
            }
            
            if (handleClass.includes('b')) { // Bottom edge
              component.style.height = Math.max(30, startHeight + dy) + 'px';
            }
            
            if (handleClass.includes('l')) { // Left edge
              component.style.left = (startLeft + dx) + 'px';
              component.style.width = Math.max(50, startWidth - dx) + 'px';
            }
            
            if (handleClass.includes('r')) { // Right edge
              component.style.width = Math.max(50, startWidth + dx) + 'px';
            }
            
            // Update property fields if visible
            if (component.classList.contains('selected')) {
              const widthInput = document.querySelector('.property-input [data-property="width"]');
              const heightInput = document.querySelector('.property-input [data-property="height"]');
              const xInput = document.querySelector('.property-input [data-property="x"]');
              const yInput = document.querySelector('.property-input [data-property="y"]');
              
              if (widthInput) widthInput.value = parseInt(component.style.width);
              if (heightInput) heightInput.value = parseInt(component.style.height);
              if (xInput && handleClass.includes('l')) xInput.value = parseInt(component.style.left);
              if (yInput && handleClass.includes('t')) yInput.value = parseInt(component.style.top);
            }
          };
          
          const upHandler = function() {
            document.removeEventListener('mousemove', moveHandler);
            document.removeEventListener('mouseup', upHandler);
            
            // Generate code after resizing
            generateCode();
          };
          
          document.addEventListener('mousemove', moveHandler);
          document.addEventListener('mouseup', upHandler);
        });
      });
    }
    
    // Select a component and show its properties
    function selectComponent(component) {
      // Deselect any previously selected component
      document.querySelectorAll('.canvas-component.selected').forEach(el => {
        el.classList.remove('selected');
      });
      
      // Select the component
      component.classList.add('selected');
      
      // Show component properties
      showComponentProperties(component);
    }
    
    // Show component properties in the properties panel
    function showComponentProperties(component) {
      const propertiesContent = document.querySelector('.properties-content');
      const componentType = component.getAttribute('data-type');
      
      // Create HTML for the properties panel
      let html = `
        <div class="properties-tabs">
          <div class="property-tab active" data-tab-id="basic">Basic</div>
          <div class="property-tab" data-tab-id="style">Style</div>
          <div class="property-tab" data-tab-id="advanced">Advanced</div>
        </div>
        
        <div class="tab-pane active" data-tab="basic">
          <div class="property-group">
            <div class="property-group-title">Position & Size</div>
            
            <div class="property-row">
              <div class="property-label">X Position</div>
              <div class="property-input">
                <input type="number" data-property="x" value="${parseInt(component.style.left)}" min="0">
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">Y Position</div>
              <div class="property-input">
                <input type="number" data-property="y" value="${parseInt(component.style.top)}" min="0">
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">Width</div>
              <div class="property-input">
                <input type="number" data-property="width" value="${parseInt(component.style.width)}" min="10">
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">Height</div>
              <div class="property-input">
                <input type="number" data-property="height" value="${parseInt(component.style.height)}" min="10">
              </div>
            </div>
          </div>
          
          ${getComponentSpecificProperties(componentType)}
        </div>
        
        <div class="tab-pane" data-tab="style">
          <div class="property-group">
            <div class="property-group-title">Appearance</div>
            
            <div class="property-row">
              <div class="property-label">Background Color</div>
              <div class="property-input color">
                <input type="color" data-property="backgroundColor" value="#ffffff">
                <input type="text" data-property-link="backgroundColor" value="#ffffff">
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">Text Color</div>
              <div class="property-input color">
                <input type="color" data-property="color" value="#202124">
                <input type="text" data-property-link="color" value="#202124">
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">Font</div>
              <div class="property-input">
                <select data-property="fontFamily">
                  <option value="Google Sans">Google Sans</option>
                  <option value="Arial">Arial</option>
                  <option value="Roboto">Roboto</option>
                  <option value="Verdana">Verdana</option>
                  <option value="Georgia">Georgia</option>
                </select>
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">Font Size</div>
              <div class="property-input">
                <input type="number" data-property="fontSize" value="14" min="8" max="72">
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">Border</div>
              <div class="property-input">
                <div style="display: flex; gap: 4px;">
                  <input type="number" data-property="borderWidth" value="0" min="0" max="10" style="width: 60px;">
                  <select data-property="borderStyle" style="width: 100px;">
                    <option value="none">None</option>
                    <option value="solid">Solid</option>
                    <option value="dashed">Dashed</option>
                    <option value="dotted">Dotted</option>
                  </select>
                  <input type="color" data-property="borderColor" value="#dadce0">
                </div>
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">Border Radius</div>
              <div class="property-input">
                <input type="number" data-property="borderRadius" value="0" min="0" max="50">
              </div>
            </div>
          </div>
        </div>
        
        <div class="tab-pane" data-tab="advanced">
          <div class="property-group">
            <div class="property-group-title">Component Settings</div>
            
            <div class="property-row">
              <div class="property-label">ID</div>
              <div class="property-input">
                <input type="text" data-property="id" value="${componentType}_${Math.floor(Math.random() * 1000)}">
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">Visible</div>
              <div class="property-input">
                <select data-property="visible">
                  <option value="true" selected>Yes</option>
                  <option value="false">No</option>
                </select>
              </div>
            </div>
          </div>
          
          ${getAdvancedComponentProperties(componentType)}
        </div>
      `;
      
      // Set properties panel content
      propertiesContent.innerHTML = html;
      
      // Setup tab switching
      setupPropertyTabs();
      
      // Handle property changes
      setupPropertyChangeHandlers(component);
      
      // Show the properties panel if it was closed
      document.querySelector('.properties-panel').style.display = 'block';
    }
    
    // Get component-specific properties HTML
    function getComponentSpecificProperties(componentType) {
      let html = '';
      
      // Properties for text input
      if (componentType === 'textInput') {
        html = `
          <div class="property-group">
            <div class="property-group-title">Input Settings</div>
            
            <div class="property-row">
              <div class="property-label">Placeholder</div>
              <div class="property-input">
                <input type="text" data-property="placeholder" value="Enter text...">
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">Default Value</div>
              <div class="property-input">
                <input type="text" data-property="value" value="">
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">Required</div>
              <div class="property-input">
                <select data-property="required">
                  <option value="false" selected>No</option>
                  <option value="true">Yes</option>
                </select>
              </div>
            </div>
          </div>
        `;
      }
      
      // Properties for buttons
      else if (componentType === 'button' || componentType === 'iconButton') {
        html = `
          <div class="property-group">
            <div class="property-group-title">Button Settings</div>
            
            <div class="property-row">
              <div class="property-label">Text</div>
              <div class="property-input">
                <input type="text" data-property="text" value="Button">
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">Style</div>
              <div class="property-input">
                <select data-property="buttonStyle">
                  <option value="primary" selected>Primary</option>
                  <option value="secondary">Secondary</option>
                  <option value="text">Text Only</option>
                </select>
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">Click Action</div>
              <div class="property-input">
                <select data-property="clickAction">
                  <option value="none" selected>None</option>
                  <option value="submit">Submit Form</option>
                  <option value="link">Open Link</option>
                  <option value="function">Run Function</option>
                </select>
              </div>
            </div>
          </div>
        `;
      }
      
      // Properties for headings and paragraphs
      else if (componentType === 'heading' || componentType === 'paragraph') {
        html = `
          <div class="property-group">
            <div class="property-group-title">Text Settings</div>
            
            <div class="property-row">
              <div class="property-label">Text</div>
              <div class="property-input">
                <textarea data-property="text" rows="3">${componentType === 'heading' ? 'Heading' : 'This is a paragraph of text that can be edited in the properties panel.'}</textarea>
              </div>
            </div>
            
            ${componentType === 'heading' ? `
            <div class="property-row">
              <div class="property-label">Heading Level</div>
              <div class="property-input">
                <select data-property="headingLevel">
                  <option value="h1">H1</option>
                  <option value="h2" selected>H2</option>
                  <option value="h3">H3</option>
                  <option value="h4">H4</option>
                </select>
              </div>
            </div>
            ` : ''}
            
            <div class="property-row">
              <div class="property-label">Alignment</div>
              <div class="property-input">
                <select data-property="textAlign">
                  <option value="left" selected>Left</option>
                  <option value="center">Center</option>
                  <option value="right">Right</option>
                  ${componentType === 'paragraph' ? '<option value="justify">Justify</option>' : ''}
                </select>
              </div>
            </div>
          </div>
        `;
      }
      
      // Properties for timer component
      else if (componentType === 'timer') {
        html = `
          <div class="property-group">
            <div class="property-group-title">Timer Settings</div>
            
            <div class="property-row">
              <div class="property-label">Duration (seconds)</div>
              <div class="property-input">
                <input type="number" data-property="duration" value="60" min="1">
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">Count Direction</div>
              <div class="property-input">
                <select data-property="countDirection">
                  <option value="down" selected>Countdown</option>
                  <option value="up">Count Up</option>
                </select>
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">Auto Start</div>
              <div class="property-input">
                <select data-property="autoStart">
                  <option value="false" selected>No</option>
                  <option value="true">Yes</option>
                </select>
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">On Complete</div>
              <div class="property-input">
                <select data-property="onComplete">
                  <option value="none" selected>Do Nothing</option>
                  <option value="alert">Show Alert</option>
                  <option value="function">Run Function</option>
                </select>
              </div>
            </div>
          </div>
        `;
      }
      
      // Properties for data table
      else if (componentType === 'dataTable') {
        html = `
          <div class="property-group">
            <div class="property-group-title">Table Settings</div>
            
            <div class="property-row">
              <div class="property-label">Data Source</div>
              <div class="property-input">
                <select data-property="dataSource">
                  <option value="manual" selected>Manual Data</option>
                  <option value="sheet">Google Sheet</option>
                  <option value="function">Script Function</option>
                </select>
              </div>
            </div>
            
            <div class="property-row data-source-sheet" style="display: none;">
              <div class="property-label">Sheet Name</div>
              <div class="property-input">
                <input type="text" data-property="sheetName" value="">
              </div>
            </div>
            
            <div class="property-row data-source-sheet" style="display: none;">
              <div class="property-label">Range</div>
              <div class="property-input">
                <input type="text" data-property="range" value="A1:C10">
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">Headers</div>
              <div class="property-input">
                <input type="text" data-property="headers" value="Column 1, Column 2, Column 3">
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">Sortable</div>
              <div class="property-input">
                <select data-property="sortable">
                  <option value="true" selected>Yes</option>
                  <option value="false">No</option>
                </select>
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">Filterable</div>
              <div class="property-input">
                <select data-property="filterable">
                  <option value="true" selected>Yes</option>
                  <option value="false">No</option>
                </select>
              </div>
            </div>
          </div>
        `;
      }
      
      // Properties for conditional display
      else if (componentType === 'conditionalDisplay') {
        html = `
          <div class="property-group">
            <div class="property-group-title">Condition Settings</div>
            
            <div class="property-row">
              <div class="property-label">Condition Type</div>
              <div class="property-input">
                <select data-property="conditionType">
                  <option value="date" selected>Date</option>
                  <option value="value">Value</option>
                  <option value="user">User</option>
                </select>
              </div>
            </div>
            
            <div class="property-row condition-date">
              <div class="property-label">Date Condition</div>
              <div class="property-input">
                <select data-property="dateCondition">
                  <option value="equals" selected>Equals</option>
                  <option value="before">Before</option>
                  <option value="after">After</option>
                  <option value="withinDays">Within Days</option>
                </select>
              </div>
            </div>
            
            <div class="property-row condition-date">
              <div class="property-label">Target Date</div>
              <div class="property-input">
                <input type="date" data-property="targetDate" value="${new Date().toISOString().split('T')[0]}">
              </div>
            </div>
            
            <div class="property-row condition-date condition-within-days" style="display: none;">
              <div class="property-label">Days</div>
              <div class="property-input">
                <input type="number" data-property="daysRange" value="7" min="1">
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">Content</div>
              <div class="property-input">
                <textarea data-property="content" rows="3">This content will show or hide based on conditions</textarea>
              </div>
            </div>
          </div>
        `;
      }
      
      return html;
    }
    
    // Get advanced component properties HTML
    function getAdvancedComponentProperties(componentType) {
      let html = '';
      
      // Advanced properties for interactive components
      if (['timer', 'counter', 'dateDisplay'].includes(componentType)) {
        html = `
          <div class="property-group">
            <div class="property-group-title">Server Integration</div>
            
            <div class="property-row">
              <div class="property-label">Server Action</div>
              <div class="property-input">
                <select data-property="serverAction">
                  <option value="none" selected>None</option>
                  <option value="save">Save to Sheet</option>
                  <option value="trigger">Trigger Schedule</option>
                  <option value="custom">Custom Function</option>
                </select>
              </div>
            </div>
            
            <div class="property-row server-action-custom" style="display: none;">
              <div class="property-label">Function Name</div>
              <div class="property-input">
                <input type="text" data-property="functionName" value="">
              </div>
            </div>
          </div>
        `;
      }
      
      // Advanced properties for data components
      else if (['dataTable', 'chart', 'textOutput'].includes(componentType)) {
        html = `
          <div class="property-group">
            <div class="property-group-title">Data Refresh</div>
            
            <div class="property-row">
              <div class="property-label">Auto Refresh</div>
              <div class="property-input">
                <select data-property="autoRefresh">
                  <option value="false" selected>No</option>
                  <option value="true">Yes</option>
                </select>
              </div>
            </div>
            
            <div class="property-row auto-refresh-settings" style="display: none;">
              <div class="property-label">Interval (seconds)</div>
              <div class="property-input">
                <input type="number" data-property="refreshInterval" value="30" min="5">
              </div>
            </div>
          </div>
        `;
      }
      
      // Advanced properties for conditional components
      else if (['conditionalDisplay', 'conditionalAction', 'notification'].includes(componentType)) {
        html = `
          <div class="property-group">
            <div class="property-group-title">Action Settings</div>
            
            <div class="property-row">
              <div class="property-label">Log Action</div>
              <div class="property-input">
                <select data-property="logAction">
                  <option value="false" selected>No</option>
                  <option value="true">Yes</option>
                </select>
              </div>
            </div>
            
            <div class="property-row">
              <div class="property-label">Email Notification</div>
              <div class="property-input">
                <select data-property="emailNotification">
                  <option value="false" selected>No</option>
                  <option value="true">Yes</option>
                </select>
              </div>
            </div>
            
            <div class="property-row email-settings" style="display: none;">
              <div class="property-label">Email Address</div>
              <div class="property-input">
                <input type="text" data-property="emailAddress" value="">
              </div>
            </div>
          </div>
        `;
      }
      
      return html;
    }
    
    // Setup property tab switching
    function setupPropertyTabs() {
      document.querySelectorAll('.property-tab').forEach(tab => {
        tab.addEventListener('click', function() {
          // Get the tab ID
          const tabId = this.getAttribute('data-tab-id');
          
          // Remove active class from all tabs
          document.querySelectorAll('.property-tab').forEach(t => {
            t.classList.remove('active');
          });
          
          // Add active class to clicked tab
          this.classList.add('active');
          
          // Hide all tab panes
          document.querySelectorAll('.tab-pane').forEach(pane => {
            pane.classList.remove('active');
          });
          
          // Show the selected tab pane
          document.querySelector(`.tab-pane[data-tab="${tabId}"]`).classList.add('active');
        });
      });
    }
    
    // Setup change handlers for property fields
    function setupPropertyChangeHandlers(component) {
      const propertiesContent = document.querySelector('.properties-content');
      
      // Handle all property input changes
      propertiesContent.addEventListener('change', function(e) {
        const target = e.target;
        
        // Skip if not a property input
        if (!target.hasAttribute('data-property') && !target.hasAttribute('data-property-link')) return;
        
        // Get property name
        const propertyName = target.getAttribute('data-property') || target.getAttribute('data-property-link');
        
        // Get property value
        let value = target.value;
        
        // Convert boolean strings to actual booleans
        if (value === 'true') value = true;
        if (value === 'false') value = false;
        
        // Update component based on property
        updateComponentProperty(component, propertyName, value);
        
        // For linked properties (like color inputs)
        if (target.hasAttribute('data-property-link')) {
          const linkedInput = document.querySelector(`[data-property="${propertyName}"]`);
          if (linkedInput) linkedInput.value = value;
        }
        
        // Show/hide conditional fields based on selection
        handleConditionalFields(target);
        
        // Generate code after property change
        generateCode();
      });
      
      // Initialize conditional fields visibility
      document.querySelectorAll('select[data-property]').forEach(select => {
        handleConditionalFields(select);
      });
    }
    
    // Handle showing/hiding conditional fields based on selection
    function handleConditionalFields(element) {
      // Skip if not a select element
      if (element.tagName !== 'SELECT') return;
      
      const property = element.getAttribute('data-property');
      const value = element.value;
      
      // Handle condition type changes
      if (property === 'conditionType') {
        document.querySelectorAll('[class*="condition-"]').forEach(field => {
          field.style.display = 'none';
        });
        
        document.querySelectorAll('.condition-' + value).forEach(field => {
          field.style.display = 'block';
        });
      }
      
      // Handle date condition type
      if (property === 'dateCondition') {
        const withinDaysFields = document.querySelectorAll('.condition-within-days');
        if (value === 'withinDays') {
          withinDaysFields.forEach(field => field.style.display = 'block');
        } else {
          withinDaysFields.forEach(field => field.style.display = 'none');
        }
      }
      
      // Handle data source changes
      if (property === 'dataSource') {
        const sheetFields = document.querySelectorAll('.data-source-sheet');
        if (value === 'sheet') {
          sheetFields.forEach(field => field.style.display = 'block');
        } else {
          sheetFields.forEach(field => field.style.display = 'none');
        }
      }
      
      // Handle server action changes
      if (property === 'serverAction') {
        const customFields = document.querySelectorAll('.server-action-custom');
        if (value === 'custom') {
          customFields.forEach(field => field.style.display = 'block');
        } else {
          customFields.forEach(field => field.style.display = 'none');
        }
      }
      
      // Handle auto refresh changes
      if (property === 'autoRefresh') {
        const refreshFields = document.querySelectorAll('.auto-refresh-settings');
        if (value === true || value === 'true') {
          refreshFields.forEach(field => field.style.display = 'block');
        } else {
          refreshFields.forEach(field => field.style.display = 'none');
        }
      }
      
      // Handle email notification changes
      if (property === 'emailNotification') {
        const emailFields = document.querySelectorAll('.email-settings');
        if (value === true || value === 'true') {
          emailFields.forEach(field => field.style.display = 'block');
        } else {
          emailFields.forEach(field => field.style.display = 'none');
        }
      }
    }
    
    // Update component based on property change
    function updateComponentProperty(component, property, value) {
      const componentType = component.getAttribute('data-type');
      
      // Handle dimension and position properties
      if (property === 'width') {
        component.style.width = value + 'px';
      }
      else if (property === 'height') {
        component.style.height = value + 'px';
      }
      else if (property === 'x') {
        component.style.left = value + 'px';
      }
      else if (property === 'y') {
        component.style.top = value + 'px';
      }
      
      // Handle style properties
      else if (['backgroundColor', 'color', 'borderWidth', 'borderColor', 'borderStyle', 'borderRadius'].includes(property)) {
        // For border properties, combine them
        if (property.startsWith('border')) {
          const borderWidth = document.querySelector('[data-property="borderWidth"]')?.value || 0;
          const borderStyle = document.querySelector('[data-property="borderStyle"]')?.value || 'none';
          const borderColor = document.querySelector('[data-property="borderColor"]')?.value || '#000000';
          
          if (borderWidth > 0 && borderStyle !== 'none') {
            component.style.border = `${borderWidth}px ${borderStyle} ${borderColor}`;
          } else {
            component.style.border = 'none';
          }
          
          if (property === 'borderRadius') {
            component.style.borderRadius = value + 'px';
          }
        } else {
          // For other style properties, apply directly
          component.style[property] = value;
        }
      }
      
      // Handle component-specific properties
      else if (property === 'text') {
        // For text content in various components
        if (componentType === 'heading') {
          const headingLevel = document.querySelector('[data-property="headingLevel"]')?.value || 'h2';
          component.querySelector('h1, h2, h3, h4, h5, h6')?.remove();
          const heading = document.createElement(headingLevel);
          heading.textContent = value;
          heading.style.margin = '0';
          heading.style.fontFamily = 'Google Sans';
          heading.style.fontWeight = '500';
          component.querySelector('div').appendChild(heading);
        }
        else if (componentType === 'paragraph') {
          const p = component.querySelector('p');
          if (p) p.textContent = value;
        }
        else if (componentType === 'button') {
          const button = component.querySelector('button');
          if (button) button.textContent = value;
        }
      }
      
      // Handle visibility
      else if (property === 'visible') {
        component.style.display = value ? 'block' : 'none';
      }
      
      // Handle conditional component content
      else if (property === 'content' && componentType === 'conditionalDisplay') {
        const contentDiv = component.querySelector('.conditional-content');
        if (contentDiv) contentDiv.textContent = value;
      }
      
      // Add more property handlers as needed for specific components
    }
    
    // Initialize properties panel
    function initPropertiesPanel() {
      // Close properties panel button
      document.getElementById('closeProperties').addEventListener('click', function() {
        // Deselect any selected component
        document.querySelectorAll('.canvas-component.selected').forEach(el => {
          el.classList.remove('selected');
        });
        
        // Hide properties panel
        document.querySelector('.properties-panel').style.display = 'none';
      });
      
      // Handle clicks on the design canvas background (deselect components)
      document.getElementById('designCanvas').addEventListener('click', function(e) {
        if (e.target === this) {
          // Deselect any selected component
          document.querySelectorAll('.canvas-component.selected').forEach(el => {
            el.classList.remove('selected');
          });
          
          // Show canvas properties
          showCanvasProperties();
        }
      });
      
      // Initialize canvas properties
      showCanvasProperties();
      
      // Handle viewport changes
      document.getElementById('viewportSelect').addEventListener('change', function() {
        const designCanvas = document.getElementById('designCanvas');
        
        // Remove existing viewport classes
        designCanvas.classList.remove('mobile', 'tablet', 'desktop');
        
        // Add selected viewport class
        designCanvas.classList.add(this.value);
        
        // Log viewport change
        logToConsole(`Viewport changed to ${this.value} view`, 'info');
      });
    }
    
    // Show canvas properties when no component is selected
    function showCanvasProperties() {
      const propertiesContent = document.querySelector('.properties-content');
      
      // Canvas properties are already in the HTML by default
      
      // Setup canvas property change handlers
      document.getElementById('canvasBgColor').addEventListener('input', function() {
        const designCanvas = document.getElementById('designCanvas');
        designCanvas.style.backgroundColor = this.value;
        document.getElementById('canvasBgColorText').value = this.value;
      });
      
      document.getElementById('canvasBgColorText').addEventListener('input', function() {
        const designCanvas = document.getElementById('designCanvas');
        designCanvas.style.backgroundColor = this.value;
        document.getElementById('canvasBgColor').value = this.value;
      });
      
      document.getElementById('canvasTitle').addEventListener('input', function() {
        document.querySelector('.workspace-title').textContent = this.value;
      });
      
      document.getElementById('canvasTheme').addEventListener('change', function() {
        const designCanvas = document.getElementById('designCanvas');
        
        // Apply theme
        if (this.value === 'dark') {
          designCanvas.style.backgroundColor = '#202124';
          designCanvas.style.color = '#e8eaed';
        } else if (this.value === 'light') {
          designCanvas.style.backgroundColor = '#ffffff';
          designCanvas.style.color = '#202124';
        }
        
        // Update color input
        document.getElementById('canvasBgColor').value = window.getComputedStyle(designCanvas).backgroundColor;
        document.getElementById('canvasBgColorText').value = window.getComputedStyle(designCanvas).backgroundColor;
      });
    }
    
    // Initialize component categories in sidebar
    function initComponentCategories